{"version":3,"file":"static/js/857.6a7107a3.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__JmpBN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__CodB2\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__LDM4Y\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  console.log(props.comments);\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__XOKKB\",\"loading\":\"NewCommentForm_loading__Ad2AJ\",\"control\":\"NewCommentForm_control__DWGnM\",\"actions\":\"NewCommentForm_actions__eFIEa\"};","import { useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { addComment } from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const params = useParams();\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) onAddComment();\n  }, [onAddComment, error, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: commentTextRef.current.value,\n      quoteId: params.quoteId,\n    });\n  };\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner className=\"centered\" />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addCommentHandler = useCallback(() => {\n    //we used callback because we are passing this () as a dependency in the commentForm\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === \"completed\" &&(!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddComment={addCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__RyNWT\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  Route,\r\n  Switch,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api.js\";\r\n\r\n// useRouteMatch() vs useLocation()\r\n// the match.path returns the path of the route which renders the component in which  we are using the match()\r\n// same for the match.url whereas the location.pathName will always return the path at which we are currently at\r\n//i.e:- which is in the browser search bar(root-relative path). there is no url key in location object too.\r\n//hence we use the match.url or match.path to append something to the path of the router that is activated\r\n\r\nfunction QuoteDetails() {\r\n  const params = useParams();\r\n  //unlike useLocation it also gives us the url we are currently at\r\n  const match = useRouteMatch();\r\n  const {\r\n    sendRequest: sendingRequest,\r\n    status,\r\n    error,\r\n    data,\r\n  } = useHttp(getSingleQuote, true);\r\n  const [quote, setQuote] = useState({});\r\n\r\n  useEffect(() => {\r\n    sendingRequest(params.quoteId);\r\n  }, [sendingRequest, params.quoteId]);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") setQuote(data);\r\n  }, [setQuote, status, data]);\r\n\r\n  if (status === \"pending\") return <LoadingSpinner className=\"centered\" />;\r\n\r\n  if (error) return <p className=\"centered\">{error}</p>;\r\n\r\n  if (!quote.text) return <p>No Quote Found</p>;\r\n\r\n  return (\r\n    //to understand match.path  and match.url refer above comment\r\n    <>\r\n      <h1>Quote Details</h1>\r\n      <HighlightedQuote\r\n        text={quote.text}\r\n        author={quote.author}\r\n      ></HighlightedQuote>\r\n      <Switch>\r\n        <Route path={match.path} exact>\r\n          <div className=\"centered\">\r\n            <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n              Load Comments\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n          <Comments />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\nexport default QuoteDetails;\r\n"],"names":["props","className","classes","text","console","log","comments","map","comment","id","params","useParams","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","useEffect","submitFormHandler","event","preventDefault","commentData","current","value","quoteId","onSubmit","LoadingSpinner","htmlFor","rows","ref","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","sendingRequest","quote","setQuote","path","exact","to","url"],"sourceRoot":""}