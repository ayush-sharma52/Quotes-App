{"version":3,"file":"static/js/923.deaf9dfd.chunk.js","mappings":"8NACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,UAC7C,E,SCHD,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCiEnI,EA3DkB,SAACH,GACjB,IAAMI,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UACrB,GAAoCE,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACE,UAAC,EAAD,YACE,SAAC,KAAD,CACEC,KAAMF,EACNG,QAAS,iBACP,sEADO,KAIX,kBACEV,UAAWC,EACXU,SA3BN,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCjB,EAAMmB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GACjD,EAmBKI,QAjBiB,WACrBb,GAAc,EACf,EAYG,UAKGT,EAAMuB,YACL,gBAAKtB,UAAWC,EAAhB,UACE,SAACsB,EAAA,EAAD,OAIJ,iBAAKvB,UAAWC,EAAhB,WACE,kBAAOuB,QAAQ,SAAf,SAAwB,YACxB,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKxB,QAEtC,iBAAKH,UAAWC,EAAhB,WACE,kBAAOuB,QAAQ,OAAf,SAAsB,UACtB,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKtB,QAEpC,gBAAKL,UAAWC,EAAhB,UACE,mBAAQD,UAAU,MAAM6B,QA/BR,WACtBrB,GAAc,EACf,EA6BO,SAAkD,qBAO3D,E,kBCnCD,MAvBA,WACE,IAAMsB,GAAUC,EAAAA,EAAAA,MAChB,GAA2CC,EAAAA,EAAAA,GAAQC,EAAAA,IAA9BC,EAArB,EAAQC,YAAwBC,EAAhC,EAAgCA,QAEhCC,EAAAA,EAAAA,YAAU,WACO,cAAXD,GAAwBN,EAAQQ,KAAK,UAC1C,GAAE,CAACF,EAAON,IAEX,IAAMS,EAAe,yCAAG,WAAOC,GAAP,sEACtBN,EAAUM,GADY,2CAAH,sDAQrB,OACI,SAAC,EAAD,CACElB,UAAsB,YAAXc,EACXlB,WAAYqB,GAGnB,C","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/AddQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__kcMkP\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__c9TBo\",\"loading\":\"QuoteForm_loading__51uOQ\",\"control\":\"QuoteForm_control__fA+4y\",\"actions\":\"QuoteForm_actions__igWdX\"};","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const focusInHandler = () => {\n    setIsEntering(true);\n  };\n  const focusOutHandler = () => {\n    setIsEntering(false); //we can't call it in submit handler as before the state will get updated the navigate action executes and prompt will show\n  };\n  return (\n    <Card>\n      <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure you want to leave? All your entered data will be lost..\"\n        }\n      />\n      <form\n        className={classes.form}\n        onSubmit={submitFormHandler}\n        onFocus={focusInHandler}\n      >\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor=\"author\">Author</label>\n          <input type=\"text\" id=\"author\" ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"text\">Text</label>\n          <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className=\"btn\" onClick={focusOutHandler}>\n            Add Quote\n          </button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nfunction AddQuote() {\r\n  const history = useHistory();\r\n  const { sendRequest: postQuote, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") history.push(\"/quotes\");\r\n  }, [status,history]);\r\n\r\n  const addQuoteHandler = async (quote) => {\r\n    postQuote(quote);\r\n    // history.push(\"/quotes\");\r\n    // the states are scheduled so if we go back to the quotes page now it means we didn't waited for the states to change\r\n    //and didn't displayed different UI's based on them so we should only go back to quotes page when the state gets changed\r\n    //to completed and hence we know all required UI's got rendered and now we can go back\r\n  };\r\n\r\n  return (\r\n      <QuoteForm\r\n        isLoading={status === \"pending\"}\r\n        onAddQuote={addQuoteHandler}\r\n      />\r\n  );\r\n}\r\nexport default AddQuote;\r\n"],"names":["props","className","classes","children","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","onClick","history","useHistory","useHttp","addQuote","postQuote","sendRequest","status","useEffect","push","addQuoteHandler","quote"],"sourceRoot":""}