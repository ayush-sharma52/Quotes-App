{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","console","log","comments","map","comment","id","NewCommentForm","params","useParams","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","useEffect","submitFormHandler","event","preventDefault","commentData","current","value","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","getSingleQuote","sendingRequest","setQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.64af9643.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1CNYV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2vrKQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__kWV2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3QUIc\",\"loading\":\"NewCommentForm_loading__2ewjm\",\"control\":\"NewCommentForm_control__VNYMU\",\"actions\":\"NewCommentForm_actions__dihQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1Hxz-\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  console.log(props.comments);\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { addComment } from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const params = useParams();\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) onAddComment();\n  }, [onAddComment, error, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: commentTextRef.current.value,\n      quoteId: params.quoteId,\n    });\n  };\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner className=\"centered\" />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addCommentHandler = useCallback(() => {\n    //we used callback because we are passing this () as a dependency in the commentForm\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === \"completed\" &&(!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddComment={addCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  Route,\r\n  Switch,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api.js\";\r\n\r\n// useRouteMatch() vs useLocation()\r\n// the match.path returns the path of the route which renders the component in which  we are using the match()\r\n// same for the match.url whereas the location.pathName will always return the path at which we are currently at\r\n//i.e:- which is in the browser search bar(root-relative path). there is no url key in location object too.\r\n//hence we use the match.url or match.path to append something to the path of the router that is activated\r\n\r\nfunction QuoteDetails() {\r\n  const params = useParams();\r\n  //unlike useLocation it also gives us the url we are currently at\r\n  const match = useRouteMatch();\r\n  const {\r\n    sendRequest: sendingRequest,\r\n    status,\r\n    error,\r\n    data,\r\n  } = useHttp(getSingleQuote, true);\r\n  const [quote, setQuote] = useState({});\r\n\r\n  useEffect(() => {\r\n    sendingRequest(params.quoteId);\r\n  }, [sendingRequest, params.quoteId]);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") setQuote(data);\r\n  }, [setQuote, status, data]);\r\n\r\n  if (status === \"pending\") return <LoadingSpinner className=\"centered\" />;\r\n\r\n  if (error) return <p className=\"centered\">{error}</p>;\r\n\r\n  if (!quote.text) return <p>No Quote Found</p>;\r\n\r\n  return (\r\n    //to understand match.path  and match.url refer above comment\r\n    <>\r\n      <h1>Quote Details</h1>\r\n      <HighlightedQuote\r\n        text={quote.text}\r\n        author={quote.author}\r\n      ></HighlightedQuote>\r\n      <Switch>\r\n        <Route path={match.path} exact>\r\n          <div className=\"centered\">\r\n            <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n              Load Comments\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n          <Comments />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}