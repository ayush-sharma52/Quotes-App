{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","AddQuote","history","useHistory","useHttp","addQuote","postQuote","sendRequest","status","useEffect","push","addQuoteHandler","quote"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,yGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,UAC7C,E,yBC8DcC,EA3DG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACE,eAAC,EAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,iBACP,sEADO,IAIX,uBACEZ,UAAWC,IAAQY,KACnBC,SA3BN,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBZ,EAAea,QAAQC,MACvCC,EAAcb,EAAaW,QAAQC,MAIzCpB,EAAMsB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GACjD,EAmBKI,QAjBiB,WACrBd,GAAc,EACf,EAYG,UAKGX,EAAM0B,WACL,qBAAKzB,UAAWC,IAAQyB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK3B,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKL,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKP,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAMmC,QA/BR,WACtBzB,GAAc,EACf,EA6BO,8BAOT,E,gBCnCc0B,UAvBf,WACE,IAAMC,EAAUC,cAChB,EAA2CC,YAAQC,KAA9BC,EAArB,EAAQC,YAAwBC,EAAhC,EAAgCA,OAEhCC,qBAAU,WACO,cAAXD,GAAwBN,EAAQQ,KAAK,UAC1C,GAAE,CAACF,EAAON,IAEX,IAAMS,EAAe,iDAAG,WAAOC,GAAP,2EACtBN,EAAUM,GADY,2CAAH,sDAQrB,OACI,cAAC,EAAD,CACEtB,UAAsB,YAAXkB,EACXtB,WAAYyB,GAGnB,C","file":"static/js/4.4fbe656b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1rCoF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__ocapW\",\"loading\":\"QuoteForm_loading__3Xa_V\",\"control\":\"QuoteForm_control__3Dx8V\",\"actions\":\"QuoteForm_actions__35Z-Z\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const focusInHandler = () => {\n    setIsEntering(true);\n  };\n  const focusOutHandler = () => {\n    setIsEntering(false); //we can't call it in submit handler as before the state will get updated the navigate action executes and prompt will show\n  };\n  return (\n    <Card>\n      <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure you want to leave? All your entered data will be lost..\"\n        }\n      />\n      <form\n        className={classes.form}\n        onSubmit={submitFormHandler}\n        onFocus={focusInHandler}\n      >\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor=\"author\">Author</label>\n          <input type=\"text\" id=\"author\" ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"text\">Text</label>\n          <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className=\"btn\" onClick={focusOutHandler}>\n            Add Quote\n          </button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nfunction AddQuote() {\r\n  const history = useHistory();\r\n  const { sendRequest: postQuote, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") history.push(\"/quotes\");\r\n  }, [status,history]);\r\n\r\n  const addQuoteHandler = async (quote) => {\r\n    postQuote(quote);\r\n    // history.push(\"/quotes\");\r\n    // the states are scheduled so if we go back to the quotes page now it means we didn't waited for the states to change\r\n    //and didn't displayed different UI's based on them so we should only go back to quotes page when the state gets changed\r\n    //to completed and hence we know all required UI's got rendered and now we can go back\r\n  };\r\n\r\n  return (\r\n      <QuoteForm\r\n        isLoading={status === \"pending\"}\r\n        onAddQuote={addQuoteHandler}\r\n      />\r\n  );\r\n}\r\nexport default AddQuote;\r\n"],"sourceRoot":""}